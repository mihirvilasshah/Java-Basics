Static
=======
Static keyword can be used with class, variable, method and block. 
Static members belong to the class instead of a specific instance, 
this means if you make a member static, you can access it without object.

Here we have a static method myMethod(), 
we can call this method without any object because when we make a member static it becomes class level. 
If we remove the static keyword and make it non-static then we must need to create an object of the class in order to call it.

Static members are common for all the instances(objects) of the class but non-static members are separate for each instance of class.

One rule-of-thumb: ask yourself "does it make sense to call this method, 
even if no Obj has been constructed yet?" If so, it should definitely be static.
So in a class Car you might have a method double convertMpgToKpl(double mpg) which would be static, 
because one might want to know what 35mpg converts to, even if nobody has ever built a Car. 
But void setMileage(double mpg) (which sets the efficiency of one particular Car) 
can't be static since it's inconceivable to call the method before any Car has been constructed.

class A {         compile            run      [onClassLoad] class A ref
  static int x;  --------> bytecode ------>   [memory] x = 0
  int ;           javac              java
}


Control statements
===================

	  / selection = if, else, else if, switch case
control - - iteration = while, do while, for, forEach
	  \ jump = return, break, continue

Jump control 
=============
return - terminates the method

break - terminates the immediately enclosing for loop/ switch case

continue - just stops further execution of current iterarion and jumps to next iteration


Inner Class
============
Why Local variable i defined in an enclosing scope must be final or effectively final for inner class in for loopp?
Yes this is happening because you are accessing i variable from within your anonymous inner class, 
what happens deep inside is that another copy of your variable is created and will be use inside the anonymous inner class, 
so for data consistency the compiler will try restrict you from changing the value of i so that's why its telling you to set it to final (or effectively final).

Typecasting
============
Typecasting is possible for interfaces as ClassA implements InterfaceA, InterafaceB 
	so 
	InterfaceA iA = new ClassA();
	InteraceB iB = (InteraceB) iA; 

Not for classes it extends only one class.